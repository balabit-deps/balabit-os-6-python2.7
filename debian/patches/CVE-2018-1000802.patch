From d8b103b8b3ef9644805341216963a64098642435 Mon Sep 17 00:00:00 2001
From: Benjamin Peterson <benjamin@python.org>
Date: Wed, 29 Aug 2018 21:59:21 -0700
Subject: [PATCH] closes bpo-34540: Convert shutil._call_external_zip to use
 subprocess rather than distutils.spawn. (GH-8985)

---
 Lib/shutil.py                                    | 16 ++++++++++------
 .../2018-08-28-22-11-54.bpo-34540.gfQ0TM.rst     |  3 +++
 2 files changed, 13 insertions(+), 6 deletions(-)
 create mode 100644 Misc/NEWS.d/next/Security/2018-08-28-22-11-54.bpo-34540.gfQ0TM.rst

Index: python2.7-2.7.12/Lib/shutil.py
===================================================================
--- python2.7-2.7.12.orig/Lib/shutil.py	2018-11-12 09:35:41.528852443 -0500
+++ python2.7-2.7.12/Lib/shutil.py	2018-11-12 09:35:41.528852443 -0500
@@ -396,17 +396,21 @@ def _make_tarball(base_name, base_dir, c
 
     return archive_name
 
-def _call_external_zip(base_dir, zip_filename, verbose=False, dry_run=False):
+def _call_external_zip(base_dir, zip_filename, verbose, dry_run, logger):
     # XXX see if we want to keep an external call here
     if verbose:
         zipoptions = "-r"
     else:
         zipoptions = "-rq"
-    from distutils.errors import DistutilsExecError
-    from distutils.spawn import spawn
+    cmd = ["zip", zipoptions, zip_filename, base_dir]
+    if logger is not None:
+        logger.info(' '.join(cmd))
+    if dry_run:
+        return
+    import subprocess
     try:
-        spawn(["zip", zipoptions, zip_filename, base_dir], dry_run=dry_run)
-    except DistutilsExecError:
+        subprocess.check_call(cmd)
+    except subprocess.CalledProcessError:
         # XXX really should distinguish between "couldn't find
         # external 'zip' command" and "zip failed".
         raise ExecError, \
@@ -440,7 +444,7 @@ def _make_zipfile(base_name, base_dir, v
         zipfile = None
 
     if zipfile is None:
-        _call_external_zip(base_dir, zip_filename, verbose, dry_run)
+        _call_external_zip(base_dir, zip_filename, verbose, dry_run, logger)
     else:
         if logger is not None:
             logger.info("creating '%s' and adding '%s' to it",
